The need to store some credentials will arise as soon as a Node.js project uses a database, object storage, or an external API. These credentials, such as usernames, passwords, or tokens, are referred to as secrets, and we must obviously keep them private.


Solutions:
1) Environment Variables: The industry has widely adopted the solution of encapsulating these trade secrets in environment variables.
Using the gitignore file, we may add.env extended files to be ignored while committing to those files that only the developer has access to on his computer.


2) Seceret Manager Nodejs Client usage:
The configuration for the secerts' Google Cloud storage using nodejs is as follows: 

Installing the client library:
npm install @google-cloud/secret-manager


Using the client library
          `// Import the Secret Manager client and instantiate it:
          const {SecretManagerServiceClient} = require('@google-cloud/secret-manager');
          const client = new SecretManagerServiceClient();

          /**
           * TODO(developer): Uncomment these variables before running the sample.
           */
          // parent = 'projects/my-project', // Project for which to manage secrets.
          // secretId = 'foo', // Secret ID.
          // payload = 'hello world!' // String source data.

          async function createAndAccessSecret() {
            // Create the secret with automation replication.
            const [secret] = await client.createSecret({
              parent: parent,
              secret: {
                name: secretId,
                replication: {
                  automatic: {},
                },
              },
              secretId,
            });

            console.info(`Created secret ${secret.name}`);

            // Add a version with a payload onto the secret.
            const [version] = await client.addSecretVersion({
              parent: secret.name,
              payload: {
                data: Buffer.from(payload, 'utf8'),
              },
            });

            console.info(`Added secret version ${version.name}`);

            // Access the secret.
            const [accessResponse] = await client.accessSecretVersion({
              name: version.name,
            });

            const responsePayload = accessResponse.payload.data.toString('utf8');
            console.info(`Payload: ${responsePayload}`);
          }
          createAndAccessSecret();`



3) HashiCorp Valut: Vault is an open-source secret-keeping and sensitive data management tool from HashiCorp.

Features: 

-> Built-in notion of low trust and identity-based security enforcement

-> Encryption at rest 

-> Various methods of authentication against the Vault, such as AppRole, LDAP, and Tokens

-> Numerous hidden backends, each serving a different purpose, such as key-value stores, Active Directory, etc.

-> Support for a range of high availability storage backends, including databases (MySQL, Postgres), object stores (GCS, S3), Consul from HashiCorp, etc.  