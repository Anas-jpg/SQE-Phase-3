The wp-config.php file in Wordpress contains the keys to the kingdom. With most deployments, this file contains the database hostname,
username, password, salts, and hashes. If a hacker gains access to this file, it’s game over. One best practice is to place the the Wordpress
configuration file one level up, so it cannot be directly accessed using a browser. But that isn’t always going to keep the contents of the file 
secure. If for some reason, PHP fails on the web host, such as a botched patch or upgrade, there is a potential that PHP files are rendered as text

The main concern are vulnerabilities with Wordpress plugins. For example, in 2015, an exploit was found in the Slider Revolution (revslider) plug-in,
that allowed attackers to access wp-config.php, among other critical files on the web server, by manipulating the URL (action=revslider_show_image&img=../wp-config.php)
to gain access. By the way, this is something you can also protect against with AWS Firewall Manager and AWS WAF rules. So despite the file being stored 
one level up, this vulnerability allowed attackers 
to simply access it by manipulating the URL.

1.1 Pre-Requisites
All you need to get started is Wordpress installed and configured. You can deploy an EC2 instance, connect Wordpress to Amazon RDS (MySQL),
and do a basic installation for testing

You can keep this instance or terminate it later if you’d prefer. This initial instance will be used for the setup and testing to get our 
Wordpress database installed. Once you have Wordpress up and running, you will need some additional packages to allow environment 
variables (read from AWS Secrets Manager) to be interpreted by the wp-config.php configuration file.

    1.1.1         Composer is a PHP package manager, which is used to deploy
    1.1.2         PHP dotenv by Vance Lucas.
    1.1.2         jq is a JSON command line tool used to parse and copy the data from AWS Secrets Manager into an environment variables file (‘.env’).
    
 1.2 Load PHP dotenv into wp-config.php
 
 if(file_exists(__DIR__ . '/vendor/autoload.php')) {
require_once __DIR__ . '/vendor/autoload.php';
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();
}
if(file_exists(dirname(__DIR__) . '/vendor/autoload.php')) {
require_once dirname(__DIR__) . '/vendor/autoload.php';
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();
}

1.3 Replace Secrets with Environment Variables


